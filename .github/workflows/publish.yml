name: Publish to NPM

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  publish:
    name: Publish
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test
        env:
          PURMEMO_API_KEY: ${{ secrets.PURMEMO_API_KEY || 'test-key' }}
      
      - name: Bump version
        id: version
        run: |
          NEW_VERSION=$(npm version ${{ github.event.inputs.release_type }} --no-git-tag-version)
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
      
      - name: Commit version bump
        run: |
          git add package.json package-lock.json
          git commit -m "chore: release ${{ steps.version.outputs.new_version }}"
          git push origin main
      
      - name: Create tag
        run: |
          git tag ${{ steps.version.outputs.new_version }}
          git push origin ${{ steps.version.outputs.new_version }}
      
      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.new_version }}
          name: ${{ steps.version.outputs.new_version }}
          body: |
            ## Installation
            ```bash
            npm install purmemo-mcp@latest
            ```
            
            ## Thin Layer Architecture
            This version uses a minimal public MCP layer with all intelligence in the private API.
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}